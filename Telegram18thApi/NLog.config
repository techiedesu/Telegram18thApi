<?xml version="1.0" encoding="utf-8" ?>
<nlog xmlns="http://www.nlog-project.org/schemas/NLog.xsd"
      xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
      autoReload="true"
      throwConfigExceptions="true"
      internalLogLevel="Info">

    <!-- enable asp.net core layout renderers -->
    <extensions>
        <add assembly="NLog.Web.AspNetCore"/>
    </extensions>

    <variable name="logPrefix" value="[${longdate}] [${pad:padding=-2:fixedlength=true:inner=${threadid}}] [${pad:padding=-5:fixedlength=true:inner=${level}}] [${pad:inner=${logger}}]"/>
    <variable name="layout" value="${logPrefix} ${message:withexception=true}"/>

    <!-- the targets to write to -->
    <targets>
        <!--Console Target for hosting lifetime messages to improve Docker / Visual Studio startup detection -->
        <!-- <target xsi:type="ColoredConsole" name="console" layout="${MicrosoftConsoleLayout}" /> -->
        <target xsi:type="ColoredConsole" name="console" layout="${layout}" useDefaultRowHighlightingRules="true">
            <highlight-row foregroundColor="DarkGray" condition="level == LogLevel.Debug"/>
            <highlight-row foregroundColor="Red" condition="level == LogLevel.Error"/>
            <highlight-row foregroundColor="DarkMagenta" condition="level == LogLevel.Warn"/>
            <highlight-word regex="\[\d{4}-\d{2}-\d{2} \d{2}:\d{2}:\d{2}\.\d+\]\s\[.*\]\s\[.*\]\s\[.*\]\s" foregroundColor="Blue"/>
        </target>
    </targets>

    <!-- rules to map from logger name to target -->
    <rules>
        <!--All logs, including from Microsoft-->
        <logger name="*" minlevel="Debug" writeTo="console">
            <filters defaultAction="Log">
                <when condition="contains('${logger}', 'App.Metrics')" action="Ignore"/>
                <when condition="contains('${logger}', 'Microsoft.AspNetCore.Hosting.Diagnostics') and (level == LogLevel.Info)" action="Log"/>
                <when condition="contains('${logger}', 'Microsoft.AspNetCore') and (level == LogLevel.Info or level == LogLevel.Debug)" action="Ignore"/>
                <when condition="contains('${logger}', 'System.Net.Http.HttpClient') and (level == LogLevel.Info)" action="Ignore"/>
            </filters>
        </logger>
    </rules>
</nlog>
